---
title: "Comparing Samples with Beta Diversity" 
author: "Augustus Pendleton"
date: "`r format(Sys.time(), '%d %B, %Y')`"
editor_options: 
  chunk_output_type: console
knitr: 
  opts_chunk: 
    dpi: 300
    dev: png
    dev.args: { bg: "transparent" }
---

# Load Data and Packages

```{r load-packages}

pacman::p_load(phyloseq, ggdendro, dendextend, vegan, patchwork, GUniFrac, tidyverse)

# Make sure we're using the MarschmiLab version, which allows us to incorporate absolute abundance!
packageDescription("GUniFrac")

load("trim_physeq.RData")

source("../code/subset_dist_matrix.R")
source("../code/plotting.R")

```

# Explore samples via ordination

Conflicted with the best way to approach rarefaction and absolute values here. I'm less confident than I was with Ontario that I'm reaching equal saturation across my samples, and I don't want my beta diversity to be confounded by richness due to sequencing depth. What I settled on:


The generated_rarefied_abs_tables returns these rarefied, absolute-count normalized tables in the form of a 3D-array, where dim 1 is each sample, dim 2 is each iteration of rarefaction, and dim 3 is each ASV

```{r, generating-abs-dist-objects}

#install.packages("abind")
#install.packages("extraDistr")
source("../code/generate_rarefied_abs_tables.R")

cell_counts_prep <- 
  trim_physeq %>%
  sample_data %>%
  data.frame %>%
  select(sample, Sample_Sum)

cell_counts <- cell_counts_prep$Sample_Sum

names(cell_counts) = cell_counts_prep$sample

abs_tables <- generated_rarefied_abs_tables(physeq = trim_physeq, # Physeq with non-normalized counts (do not convert to rel abundance!)
                              iterations = 100, # Number of rarefy steps
                              rare.depth = min(sample_sums(trim_physeq)), # Depth to rarefy to
                              abs.counts = cell_counts, # NAMED vector of cell counts for each sample
                              seed = 314,
                              return_rel = FALSE) # Random seed for reproducibility

dims <- dim(abs_tables)

abs_bray_dists <- 
  map(c(1:dims[2]), 
    \(x)vegdist(abs_tables[,x,], method = "bray"))

abs_bray_dist <- Reduce(`+`, abs_bray_dists) / length(abs_bray_dists)


# abs_gun_dists <-
#   map(c(1:dims[2]),
#     \(x)GUniFrac(otu.tab = abs_tables[,x,],
#                  tree = phy_tree(trim_physeq),
#                  alpha = seq(from = 0, to = 1, by = 0.1),
#                  normalize_counts = FALSE,
#                  verbose = FALSE))

# save(abs_gun_dists, file = "abs_gun_dists.RData")

load("abs_gun_dists.RData")

gun_names <- c("d_UW","d_0","d_0.1","d_0.2","d_0.3","d_0.4","d_0.5","d_0.6","d_0.7","d_0.8","d_0.9","d_1")

names(gun_names) <- gun_names

abs_unifracs <- 
  map(gun_names, \(x){
  dist_objs <- map(abs_gun_dists,
                   \(y)as.dist(y$unifracs[,,x]))
  
  Reduce(`+`, dist_objs) / length(dist_objs)
})

```

```{r, generating-rel-dist-objects}

rel_counts <- rep(1, 36)

names(rel_counts) <- names(cell_counts)

rel_tables <- generated_rarefied_abs_tables(physeq = trim_physeq, # Physeq with non-normalized counts (do not convert to rel abundance!)
                              iterations = 100, # Number of rarefy steps
                              rare.depth = min(sample_sums(trim_physeq)), # Depth to rarefy to
                              abs.counts = rel_counts, # NAMED vector of cell counts for each sample
                              seed = 314,
                              return_rel = TRUE) # Random seed for reproducibility


rel_bray_dists <- 
  map(c(1:dims[2]), 
    \(x)vegdist(rel_tables[,x,], method = "bray"))

rel_bray_dist <- Reduce(`+`, rel_bray_dists) / length(rel_bray_dists)


# rel_gun_dists <-
#   map(c(1:dims[2]),
#     \(x)GUniFrac(otu.tab = rel_tables[,x,],
#                  tree = phy_tree(trim_physeq),
#                  alpha = seq(from = 0, to = 1, by = 0.1),
#                  normalize_counts = FALSE,
#                  verbose = FALSE))
# 
# save(rel_gun_dists, file = "rel_gun_dists.RData")

load("rel_gun_dists.RData")

gun_names <- c("d_UW","d_0","d_0.1","d_0.2","d_0.3","d_0.4","d_0.5","d_0.6","d_0.7","d_0.8","d_0.9","d_1")

names(gun_names) <- gun_names

rel_unifracs <- 
  map(gun_names, \(x){
  dist_objs <- map(rel_gun_dists,
                   \(y)as.dist(y$unifracs[,,x]))
  
  Reduce(`+`, dist_objs) / length(dist_objs)
})

```

Comparing dist values

```{r compare-dists, fig.width = 7.5, fig.height = 2.5}

bcr_au <- rel_bray_dist - abs_unifracs$d_1 

ur_au <- rel_unifracs$d_1 - abs_unifracs$d_1

bca_au <- abs_bray_dist - abs_unifracs$d_1

data.frame(comparison = rep(c("BCR - UA", "UR - UA", "BCA - UA"), each = 630),
           diff = c(bcr_au, ur_au, bca_au)) %>%
  ggplot(aes(x = diff)) + 
  geom_histogram(bins = 100) + 
  geom_vline(xintercept = 0, linetype = 2, linewidth= 0.2) + 
  facet_wrap(~comparison)


data.frame(ua = rep(c(abs_unifracs$d_1), 3),
           other_dist = c(c(rel_bray_dist),c(rel_unifracs$d_1), c(abs_bray_dist)),
           dist_name = rep(c("BR", "UR", "BA"), each = 630)) %>%
  mutate(dist_name = factor(dist_name, levels = c("BR","UR", "BA"),
                             labels = c(expression(italic(BC^{R})),
                                        expression(italic(U^{R})),
                                        expression(italic(BC^{A}))))) %>%
  ggplot(aes(x = ua, y = other_dist)) + 
  stat_density_2d(geom = "polygon", contour = TRUE,
                  aes(fill = after_stat(level)),
                  bins = 10) +
  scale_fill_distiller(palette = "Blues", direction = 1) + 
  facet_wrap(~dist_name, labeller = label_parsed) + 
  geom_abline(slope = 1, intercept = 0, linetype = 2, linewidth = 0.2) + 
  scale_x_continuous(breaks = c(0,0.5,1)) + 
  scale_y_continuous(breaks = c(0,0.5,1)) + 
  coord_fixed(xlim = c(0,1), ylim = c(0,1)) + 
  labs(x = expression(italic(U^{A})), y = "Other Distance", caption = "n = 630") + 
  theme(legend.position = "none")

```

# Picking which axis to compare across

```{r choose-axis}

zhang_sam <- trim_physeq %>%
  sample_data() %>%
  data.frame()

zhang_sam %>%
  ggplot(aes(fill = Rotation, x = Sample_Sum)) + 
  geom_histogram(alpha = 0.5) +
  facet_wrap(~season) 


```

I decided to use Rotation, just with mature samples. 

```{r permanovas_and_mantels, fig.width = 4, fig.height = 4}

mature_samples <- 
  zhang_sam %>%
  dplyr::filter(season == "maturity") %>%
  pull(sample)

sm_abs_bray_dist <- subset_dist_matrix(abs_bray_dist, mature_samples)
sm_rel_bray_dist <- subset_dist_matrix(rel_bray_dist, mature_samples)
sm_rel_unifracs <- map(rel_unifracs, subset_dist_matrix, keeps = mature_samples)
sm_abs_unifracs <- map(abs_unifracs, subset_dist_matrix, keeps = mature_samples)

mature_df <- 
  zhang_sam %>%
  dplyr::filter(season == "maturity")

abs_bray_perm <- adonis2(sm_abs_bray_dist~Rotation, data = mature_df)
rel_bray_perm <- adonis2(sm_rel_bray_dist~Rotation, data = mature_df)

rel_perms <- map(sm_rel_unifracs, \(x){
  adonis2(x~Rotation, data = mature_df)
})

abs_perms <- map(sm_abs_unifracs, \(x){
  adonis2(x~Rotation, data = mature_df)
})

rel_rs <- unlist(map(rel_perms, \(x)x$R2[1]))
abs_rs <- unlist(map(abs_perms, \(x)x$R2[1]))

data.frame(rs = c(rel_rs[-1], abs_rs[-1]),
           alpha = rep(seq(0, 1, by = 0.1), 2),
           metric = rep(c("Relative","Absolute"), each = 11)) %>%
  ggplot(aes(x = alpha, y = rs, color = metric)) + 
  annotate(geom = "segment", y = rel_bray_perm$R2[1], yend = rel_bray_perm$R2[1],
           x = 0, xend = 1, linetype = 2, color = "#196689", linewidth = 2) + 
  annotate(geom = "segment", y = abs_bray_perm$R2[1], yend = abs_bray_perm$R2[1],
           x = 0, xend = 1, linetype = 2, color = "#B6AA0D", linewidth = 2) +  
    annotate(geom = "segment", y = rel_rs[1], yend = rel_rs[1],
           x = 0, xend = 1, linetype = 2, color = "darkred", linewidth = 2) + 
  labs(x = "\u03b1", y = expression(italic(R^2))) + 
  geom_line(linewidth = 2) + 
  scale_x_continuous(expand = expansion(mult = c(0, 0.05)))+ 
  scale_color_manual(values = c("#F2C621", "#008FF8"))+ 
  theme(legend.position = "none",
        axis.title = element_text(size = 20)) + 
  coord_fixed(xlim = c(0,1), ylim = c(0,1))

rel_f <- unlist(map(rel_perms, \(x)x$F[1]))
abs_f <- unlist(map(abs_perms, \(x)x$F[1]))

data.frame(f = c(rel_f[-1], abs_f[-1]),
           alpha = rep(seq(0, 1, by = 0.1), 2),
           metric = rep(c("Relative","Absolute"), each = 11)) %>%
  ggplot(aes(x = alpha, y = f, color = metric)) + 
  annotate(geom = "segment", y = rel_bray_perm$F[1], yend = rel_bray_perm$F[1],
           x = 0, xend = 1, linetype = 2, color = "#196689", linewidth = 2) + 
  annotate(geom = "segment", y = abs_bray_perm$F[1], yend = abs_bray_perm$F[1],
           x = 0, xend = 1, linetype = 2, color = "#B6AA0D", linewidth = 2) +  
    annotate(geom = "segment", y = rel_f[1], yend = rel_f[1],
           x = 0, xend = 1, linetype = 2, color = "darkred", linewidth = 2) + 
  labs(x = "\u03b1", y = expression(italic(pseudo-F))) + 
  geom_line(linewidth = 2) + 
  scale_x_continuous(expand = expansion(mult = c(0, 0.05)))+ 
  scale_color_manual(values = c("#F2C621", "#008FF8"))+ 
  theme(legend.position = "none",
        axis.title = element_text(size = 20)) + 
  coord_fixed(ratio = 1/(max(rel_bray_perm$F[1], abs_bray_perm$F[1], rel_f,  abs_f) - min(rel_bray_perm$F[1], abs_bray_perm$F[1], rel_f,  abs_f)))

rel_p <- unlist(map(rel_perms, \(x)x$`Pr(>F)`[1]))
abs_p <- unlist(map(abs_perms, \(x)x$`Pr(>F)`[1]))

data.frame(f = c(rel_p[-1], abs_p[-1]),
           alpha = rep(seq(0, 1, by = 0.1), 2),
           metric = rep(c("Relative","Absolute"), each = 11)) %>%
  ggplot(aes(x = alpha, y = f, color = metric)) + 
  annotate(geom = "segment", y = rel_bray_perm$`Pr(>F)`, yend = rel_bray_perm$`Pr(>F)`[1],
           x = 0, xend = 1, linetype = 2, color = "#196689", linewidth = 2) + 
  annotate(geom = "segment", y = abs_bray_perm$`Pr(>F)`[1], yend = abs_bray_perm$`Pr(>F)`[1],
           x = 0, xend = 1, linetype = 2, color = "#B6AA0D", linewidth = 2) +  
    annotate(geom = "segment", y = rel_p[1], yend = rel_p[1],
           x = 0, xend = 1, linetype = 2, color = "darkred", linewidth = 2) + 
  labs(x = "\u03b1", y = expression(italic(p))) + 
  geom_line(linewidth = 2) + 
  scale_x_continuous(expand = expansion(mult = c(0, 0.05)))+ 
  scale_color_manual(values = c("#F2C621", "#008FF8"))+ 
  theme(legend.position = "none",
        axis.title = element_text(size = 20)) + 
  scale_y_log10(limits = c(0.001, 1)) + 
  theme(aspect.ratio = 1)

cell_dist <- mature_df %>%
  dplyr::select(Sample_Sum) %>% 
  dist()


dist_list <- list(Bray_Rel = sm_rel_bray_dist,
                  Bray_Abs = sm_abs_bray_dist) %>%
  append(sm_rel_unifracs) %>%
  append(sm_abs_unifracs)

mantels <- unlist(map(dist_list, \(x)vegan::mantel(cell_dist, x, permutations = 999)$statistic))


data.frame(mans = mantels[c(4:14, 16:26)],
           alpha = rep(seq(0, 1, by = 0.1), 2),
           metric = rep(c("Relative","Absolute"), each = 11)) %>%
  ggplot(aes(x = alpha, y = mans, color = metric)) + 
  annotate(geom = "segment", y = mantels[1], yend =  mantels[1],
           x = 0, xend = 1, linetype = 2, color = "#196689", linewidth = 2) + 
  annotate(geom = "segment", y =  mantels[2], yend =  mantels[2],
           x = 0, xend = 1, linetype = 2, color = "#B6AA0D", linewidth = 2) +  
    annotate(geom = "segment", y =  mantels[3], yend =  mantels[3],
           x = 0, xend = 1, linetype = 2, color = "darkred", linewidth = 2) + 
  labs(x = "\u03b1", y = "Mantel R") + 
  geom_line(linewidth = 2) + 
  scale_x_continuous(expand = expansion(mult = c(0, 0.05)))+ 
  scale_color_manual(values = c("#F2C621", "#008FF8"))+ 
  theme(legend.position = "none",
        axis.title = element_text(size = 20)) + 
  coord_fixed(xlim = c(0,1), ylim = c(0,1))


```

# Exploring time of calculation

How long do these methods take? How does this scale with the number of OTUs and samples?

```{r, eval = FALSE}

pretest_physeq <-
       trim_physeq
test_physeq <-
       pretest_physeq 
test_mat <- as.matrix(otu_table(test_physeq))
     

test_mat_gun <- t(test_mat)
test_tree <- phy_tree(test_physeq)
bray_time <- microbenchmark(vegdist(test_mat, method = "bray"), times = 2, unit = "seconds")
microbenchmark(GUniFrac(otu.tab = test_mat_gun,
                               tree = test_tree,
                               alpha = seq(.1, 1, length.out = rep_tests$Alphas[i]),
                               normalize_counts = FALSE,
                               verbose = FALSE),
                      times = 1, unit = "seconds")

class(abs_tables[,1,])
dims <- dim(test_mat_gun)
good_mat_test <- matrix(test_mat_gun, nrow = 36, ncol = 24123)
all(colSums(good_mat_test) == colSums(test_mat_gun))
colnames(good_mat_test) = colnames(test_mat_gun)
rownames(good_mat_test) = rownames(test_mat_gun)

microbenchmark(GUniFrac(otu.tab = good_mat_test,
                               tree = test_tree,
                               alpha = seq(.1, 1, length.out = rep_tests$Alphas[i]),
                               normalize_counts = FALSE,
                               verbose = FALSE),
                      times = 1, unit = "seconds")
#SO MUCH FASTER!!!!!

```

```{r timing, fig.height = 4, fig.width = 4}

library(microbenchmark)

test_conditions <- 
  data.frame(
  Samples = c(rep(10, 8), 2, 5, 15, 20, 30, 10, 10, 10),
  ASVs = c(50, 100, 200, 500, 1000, 2000, 5000, 10000, rep(2000, 8)),
  Alphas = c(rep(1, 13), 2, 4, 8)
)

rep_tests <- bind_rows(replicate(50, test_conditions, simplify=F))


time_results <- vector(mode = "list", length = nrow(rep_tests))
set.seed(314)

# for(i in c(1:nrow(rep_tests))){
#  writeLines(paste("On test number", i, "Samples:", rep_tests$Samples[i], "ASVs:", rep_tests$ASVs[i], "Alphas:", rep_tests$Alphas[i]))
#      pretest_physeq <-
#        trim_physeq %>%
#        subset_samples(sample %in% sample(sample_names(trim_physeq), rep_tests$Samples[i])) %>%
#        prune_taxa(taxa_sums(.) > 0, .)
#      test_physeq <-
#        pretest_physeq %>%
#        subset_taxa(ASV %in% sample(taxa_names(pretest_physeq), rep_tests$ASVs[i]))
#      test_mat_otu <- as.matrix(otu_table(test_physeq))
#      dims <- dim(test_mat_otu)
#      test_mat <- matrix(test_mat_otu, nrow = dims[1], ncol = dims[2])
#      colnames(test_mat) = colnames(test_mat_otu)
#      rownames(test_mat) = rownames(test_mat_otu)
#      test_mat_gun <- t(test_mat)
#      test_tree <- phy_tree(test_physeq)
#      bray_time <- microbenchmark(vegdist(test_mat, method = "bray"), times = 2, unit = "seconds")
#      gun_time <-
#        microbenchmark(GUniFrac(otu.tab = test_mat_gun,
#                                tree = test_tree,
#                                alpha = seq(.1, 1, length.out = rep_tests$Alphas[i]),
#                                normalize_counts = FALSE,
#                                verbose = FALSE),
#                       times = 2, unit = "seconds")
#      wun_time <- microbenchmark(phyloseq::distance(test_physeq, method = "wunifrac"), unit = "seconds")
#      time_results[[i]] <-
#        data.frame(
#          Bray = summary(bray_time)$median,
#          Gunifrac = summary(gun_time)$median,
#          Phylo.Wunifrac = summary(wun_time)$median
#         )
# }
# save(time_results, file = "time_results.RData")
# 
# time_res_df <-
#  time_results %>%
#  bind_rows() %>%
#  cbind(rep_tests) %>%
#  pivot_longer(Bray:Phylo.Wunifrac, names_to= "Metric", values_to = "Time")
# save(time_res_df, file = "time_res_df.RData")

load("time_res_df.RData")

library(ggpubr)

time_res_df %>%
  filter(Samples == 10, ASVs == 2000, Metric == "Gunifrac") %>%
  ggplot(aes(x = Alphas, y = Time)) + 
  geom_jitter(alpha = 0.4, width = 0.2) + 
  stat_summary(geom = "point", fun = median, size = 4, alpha = 1) + 
  stat_summary(geom = "errorbar",
               fun.min = \(x)median(x)-sd(x),
               fun.max = \(x)median(x)+sd(x),
               width = 0) + 
  labs(y = "Time (s)", x = "Number of Alphas") + 
  geom_smooth(method = "lm", linetype = 2, linewidth = 0.8, se = FALSE, color = "black") + 
  stat_regline_equation(aes(label = after_stat(rr.label)))

time_res_df %>%
  filter(Alphas == 1, ASVs == 2000, Metric == "Gunifrac") %>%
  ggplot(aes(x = Samples, y = Time)) + 
  geom_jitter(alpha = 0.4, width = 0.4) + 
  stat_summary(geom = "point", fun = median, size = 4, alpha = 1) + 
  stat_summary(geom = "errorbar",
               fun.min = \(x)median(x)-sd(x),
               fun.max = \(x)median(x)+sd(x),
               width = 0) +  
  labs(y = "Time (s)", x = "Number of Samples")+ 
  geom_smooth(method = "lm", linetype = 2, linewidth = 0.8, se = FALSE, color = "black") + 
  stat_regline_equation(aes(label = after_stat(rr.label)))


time_res_df %>%
  filter(Alphas == 1, Samples == 10, Metric == "Gunifrac") %>%
  mutate(ASV_thousands = ASVs/1000) %>%
  lm(Time ~ ASV_thousands, data = .) %>% summary()

time_res_df %>%
  filter(Alphas == 1, Samples == 10, Metric == "Gunifrac") %>%
  mutate(ASV_thousands = ASVs/1000) %>%
  lm(Time ~ poly(ASV_thousands, 2, raw = TRUE), data = .) %>% summary()

model <- time_res_df %>%
  filter(Alphas == 1, Samples == 10, Metric == "Gunifrac") %>%
  mutate(ASV_thousands = ASVs/1000) %>%
  lm(Time ~ I(ASV_thousands^2) + 0, data = .) %>% summary()

time_res_df %>%
  filter(Alphas == 1, Samples == 10, Metric == "Gunifrac") %>%
  mutate(ASV_thousands = ASVs/1000) %>%
  ggplot(aes(x = ASV_thousands, y = Time)) + 
  geom_jitter(alpha = 0.4, width = 0.3) + 
  stat_summary(geom = "point", fun = median, size = 4, alpha = 1) + 
  stat_summary(geom = "errorbar",
               fun.min = \(x)median(x)-sd(x),
               fun.max = \(x)median(x)+sd(x),
               width = 0) +  
  labs(y = "Time (s)", x = "ASVs (thousands)") + 
  scale_y_sqrt() + 
  geom_smooth(method = "lm", se = FALSE,linetype = 2, color = "black")+
  annotate(geom = "text", y = 12, x = 1, label = "y==0.13*x^{2}", parse = TRUE)

time_res_df %>%
  filter(Alphas == 1, Samples == 10, Metric == "Gunifrac") %>%
  ggplot(aes(x = ASVs/1000, y = Time)) + 
  geom_jitter(alpha = 0.4, width = .6) + 
  stat_summary(geom = "point", fun = median, size = 4, alpha = 1) + 
  stat_summary(geom = "errorbar",
               fun.min = \(x)median(x)-sd(x),
               fun.max = \(x)median(x)+sd(x),
               width = 0) +  
  labs(y = "Time (s)", x = "ASVs (thousands)") + 
  geom_smooth(formula = y~I(x^2) + 0, method = "lm", linetype = 2, color = "black", se = FALSE) + 
  annotate(geom = "text", y = 12, x = 0, label = "y==0.13*x^{2}", parse = TRUE, hjust = 0)
```

```{r compare-methods, fig.height = 4, fig.width = 4}
time_res_df %>%
  filter(Alphas == 1, Samples == 10) %>%
  ggplot(aes(x = ASVs/1000, y= Time, color = Metric)) + 
  stat_summary(geom = "line", fun = median, linewidth = 1.5) + 
  stat_summary(geom = "errorbar",
               fun.min = \(x)median(x)-sd(x),
               fun.max = \(x)median(x)+sd(x),
               width = 0) +  
  scale_color_manual(values = c("#196689", "#B6AA0D", "darkred"),
                     breaks = c("Gunifrac", "Bray", "Phylo.Wunifrac"),
                     labels = c( "GUnifrac", "Bray-Curtis (vegan)","Fast Unifrac (phyloseq)")) + 
  labs(y = "Time (s)", x = "ASVs (thousands)", color = "") +
  theme(legend.box.background = element_rect(fill = NA,
                                             color = NA),
        legend.position = "inside",
        legend.position.inside = c(0.3, 0.8))

time_res_df %>%
  mutate(id = rep(c(1:50), each = 48)) %>%
  pivot_wider(names_from = Metric, values_from = Time) %>%
  mutate(Diff_Bray = Gunifrac/Bray,
         Diff_PW = Gunifrac/Phylo.Wunifrac) %>%
  summarize(Median_Diff_Bray = median(Diff_Bray),
            Median_Diff_PW = median(Diff_PW),
            Max_Diff_Bray = max(Diff_Bray))


```

# Ordinations for Supplemental

```{r ordinations, fig.width = 4, fig.height=4}

mature_physeq <- subset_samples(trim_physeq, sample %in% mature_samples)
plot_ordination(
  mature_physeq,
  ordination = ordinate(mature_physeq, method = "PCoA", distance = sm_abs_unifracs$d_1),
  color = "Rotation"
) + 
  theme(legend.box.background = element_rect(color = NA),
        aspect.ratio = 1) + 
  scale_color_manual(values = c("#196689", "#B6AA0D", "darkred")) + 
  labs(color = "Rotation", size = "Copy #/gram") + 
  geom_point(aes(size = Sample_Sum), alpha = 0.6) + 
  scale_size_continuous(labels = scales::label_log())

plot_ordination(
  mature_physeq,
  ordination = ordinate(mature_physeq, method = "PCoA", distance = sm_rel_unifracs$d_1),
  color = "Rotation"
)+ 
  theme(legend.box.background = element_rect(color = NA),
        aspect.ratio = 1) + 
  scale_color_manual(values = c("#196689", "#B6AA0D", "darkred")) + 
  labs(color = "Rotation")+ 
  geom_point(aes(size = Sample_Sum), alpha = 0.6) + 
  scale_size_continuous(labels = scales::label_log())

```

```{r ordinations-noleg-abs, fig.width = 4, fig.height=4}

mature_physeq <- subset_samples(trim_physeq, sample %in% mature_samples)
plot_ordination(
  mature_physeq,
  ordination = ordinate(mature_physeq, method = "PCoA", distance = sm_abs_unifracs$d_1),
  color = "Rotation"
) + 
  theme(aspect.ratio = 1) + 
  scale_color_manual(values = c("#196689", "#B6AA0D", "darkred")) + 
  labs(color = "Rotation") + 
  theme(legend.position = "none")+ 
  geom_point(aes(size = Sample_Sum), alpha = 0.6) + 
  scale_size_continuous(labels = scales::label_log())

```

```{r ordinations-noleg-rel, fig.width = 4, fig.height=4}

mature_physeq <- subset_samples(trim_physeq, sample %in% mature_samples)
plot_ordination(
  mature_physeq,
  ordination = ordinate(mature_physeq, method = "PCoA", distance = sm_rel_unifracs$d_1),
  color = "Rotation"
) + 
  theme(aspect.ratio = 1) + 
  scale_color_manual(values = c("#196689", "#B6AA0D", "darkred")) + 
  labs(color = "Rotation") + 
  theme(legend.position = "none")+ 
  geom_point(aes(size = Sample_Sum), alpha = 0.6) + 
  scale_size_continuous(labels = scales::label_log())

```



```{r}

```
